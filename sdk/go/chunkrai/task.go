// Code generated by Fern. DO NOT EDIT.

package chunkrai

import (
	core "github.com/gitslim/chunkr-ai-sdk/sdk/go/chunkrai/core"
)

type CreateForm struct {
	ChunkProcessing *core.Optional[ChunkProcessing]       `json:"chunk_processing,omitempty" url:"-"`
	ErrorHandling   *core.Optional[ErrorHandlingStrategy] `json:"error_handling,omitempty" url:"-"`
	// The number of seconds until task is deleted.
	// Expired tasks can **not** be updated, polled or accessed via web interface.
	ExpiresIn *core.Optional[int] `json:"expires_in,omitempty" url:"-"`
	// The file to be uploaded. Can be a URL or a base64 encoded file.
	File string `json:"file" url:"-"`
	// The name of the file to be uploaded. If not set a name will be generated.
	FileName *core.Optional[string] `json:"file_name,omitempty" url:"-"`
	// Whether to use high-resolution images for cropping and post-processing. (Latency penalty: ~7 seconds per page)
	HighResolution       *core.Optional[bool]                 `json:"high_resolution,omitempty" url:"-"`
	LlmProcessing        *core.Optional[LlmProcessing]        `json:"llm_processing,omitempty" url:"-"`
	OcrStrategy          *core.Optional[OcrStrategy]          `json:"ocr_strategy,omitempty" url:"-"`
	SegmentProcessing    *core.Optional[SegmentProcessing]    `json:"segment_processing,omitempty" url:"-"`
	SegmentationStrategy *core.Optional[SegmentationStrategy] `json:"segmentation_strategy,omitempty" url:"-"`
}

type GetTaskRouteRequest struct {
	// Whether to return base64 encoded URLs. If false, the URLs will be returned as presigned URLs.
	Base64Urls *bool `json:"-" url:"base64_urls,omitempty"`
	// Whether to include chunks in the output response
	IncludeChunks *bool `json:"-" url:"include_chunks,omitempty"`
}

type UpdateForm struct {
	ChunkProcessing *core.Optional[ChunkProcessing]       `json:"chunk_processing,omitempty" url:"-"`
	ErrorHandling   *core.Optional[ErrorHandlingStrategy] `json:"error_handling,omitempty" url:"-"`
	// The number of seconds until task is deleted.
	// Expired tasks can **not** be updated, polled or accessed via web interface.
	ExpiresIn *core.Optional[int] `json:"expires_in,omitempty" url:"-"`
	// Whether to use high-resolution images for cropping and post-processing. (Latency penalty: ~7 seconds per page)
	HighResolution       *core.Optional[bool]                 `json:"high_resolution,omitempty" url:"-"`
	LlmProcessing        *core.Optional[LlmProcessing]        `json:"llm_processing,omitempty" url:"-"`
	OcrStrategy          *core.Optional[OcrStrategy]          `json:"ocr_strategy,omitempty" url:"-"`
	SegmentProcessing    *core.Optional[SegmentProcessing]    `json:"segment_processing,omitempty" url:"-"`
	SegmentationStrategy *core.Optional[SegmentationStrategy] `json:"segmentation_strategy,omitempty" url:"-"`
}
