// Code generated by Fern. DO NOT EDIT.

package task

import (
	context "context"
	chunkrai "github.com/gitslim/chunkr-ai-sdk/sdk/go/chunkrai"
	core "github.com/gitslim/chunkr-ai-sdk/sdk/go/chunkrai/core"
	internal "github.com/gitslim/chunkr-ai-sdk/sdk/go/chunkrai/internal"
	option "github.com/gitslim/chunkr-ai-sdk/sdk/go/chunkrai/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header

	WithRawResponse *RawClient
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:          options.ToHeader(),
		WithRawResponse: NewRawClient(options),
	}
}

// Queues a document for processing and returns a TaskResponse containing:
// - Task ID for status polling
// - Initial configuration
// - File metadata
// - Processing status
// - Creation timestamp
// - Presigned URLs for file access
//
// The returned task will typically be in a `Starting` or `Processing` state.
// Use the `GET /task/{task_id}` endpoint to poll for completion.
func (c *Client) CreateTaskRoute(
	ctx context.Context,
	request *chunkrai.CreateForm,
	opts ...option.RequestOption,
) (*chunkrai.TaskResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.chunkr.ai",
	)
	endpointURL := baseURL + "/api/v1/task/parse"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &chunkrai.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *chunkrai.TaskResponse
	if _, err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieves detailed information about a task by its ID, including:
// - Processing status
// - Task configuration
// - Output data (if processing is complete)
// - File metadata (name, page count)
// - Timestamps (created, started, finished)
// - Presigned URLs for accessing files
//
// This endpoint can be used to:
// 1. Poll the task status during processing
// 2. Retrieve the final output once processing is complete
// 3. Access task metadata and configuration
func (c *Client) GetTaskRoute(
	ctx context.Context,
	// Id of the task to retrieve
	taskId *string,
	request *chunkrai.GetTaskRouteRequest,
	opts ...option.RequestOption,
) (*chunkrai.TaskResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.chunkr.ai",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/v1/task/%v",
		taskId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &chunkrai.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *chunkrai.TaskResponse
	if _, err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Delete a task by its ID.
//
// Requirements:
// - Task must have status `Succeeded` or `Failed`
func (c *Client) DeleteTaskRoute(
	ctx context.Context,
	// Id of the task to delete
	taskId *string,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.chunkr.ai",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/v1/task/%v",
		taskId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &chunkrai.InternalServerError{
				APIError: apiError,
			}
		},
	}

	if _, err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return err
	}
	return nil
}

// Cancel a task that hasn't started processing yet:
// - For new tasks: Status will be updated to `Cancelled`
// - For updating tasks: Task will revert to the previous state
//
// Requirements:
// - Task must have status `Starting`
func (c *Client) CancelTaskRoute(
	ctx context.Context,
	// Id of the task to cancel
	taskId *string,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.chunkr.ai",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/v1/task/%v/cancel",
		taskId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &chunkrai.InternalServerError{
				APIError: apiError,
			}
		},
	}

	if _, err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return err
	}
	return nil
}

// Updates an existing task's configuration and reprocesses the document.
// The original configuration will be used for all values that are not provided in the update.
//
// Requirements:
// - Task must have status `Succeeded` or `Failed`
// - New configuration must be different from the current one
//
// The returned task will typically be in a `Starting` or `Processing` state.
// Use the `GET /task/{task_id}` endpoint to poll for completion.
func (c *Client) UpdateTaskRoute(
	ctx context.Context,
	taskId string,
	request *chunkrai.UpdateForm,
	opts ...option.RequestOption,
) (*chunkrai.TaskResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.chunkr.ai",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/v1/task/%v/parse",
		taskId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &chunkrai.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *chunkrai.TaskResponse
	if _, err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPatch,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
