// This file was auto-generated by Fern from our API Definition.

package tasks

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	sdkgo "github.com/gitslim/chunkr-ai-sdk/sdk/go"
	core "github.com/gitslim/chunkr-ai-sdk/sdk/go/core"
	option "github.com/gitslim/chunkr-ai-sdk/sdk/go/option"
	io "io"
	http "net/http"
	url "net/url"
	time "time"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Retrieves a list of tasks
//
// Example usage:
// `GET /api/v1/tasks?page=1&limit=10&include_chunks=false`
func (c *Client) GetTasksRoute(
	ctx context.Context,
	request *sdkgo.GetTasksRouteRequest,
	opts ...option.RequestOption,
) ([]*sdkgo.TaskResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.chunkr.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/" + "api/v1/tasks"

	queryParams := make(url.Values)
	if request.Base64Urls != nil {
		queryParams.Add("base64_urls", fmt.Sprintf("%v", *request.Base64Urls))
	}
	if request.End != nil {
		queryParams.Add("end", fmt.Sprintf("%v", request.End.Format(time.RFC3339)))
	}
	if request.IncludeChunks != nil {
		queryParams.Add("include_chunks", fmt.Sprintf("%v", *request.IncludeChunks))
	}
	if request.Limit != nil {
		queryParams.Add("limit", fmt.Sprintf("%v", *request.Limit))
	}
	if request.Page != nil {
		queryParams.Add("page", fmt.Sprintf("%v", *request.Page))
	}
	if request.Start != nil {
		queryParams.Add("start", fmt.Sprintf("%v", request.Start.Format(time.RFC3339)))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 500:
			value := new(sdkgo.InternalServerError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response []*sdkgo.TaskResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodGet,
			MaxAttempts:  options.MaxAttempts,
			Headers:      headers,
			Client:       options.HTTPClient,
			Response:     &response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
